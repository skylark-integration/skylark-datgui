{"version":3,"sources":["controllers/NumberControllerBox.js"],"names":["define","NumberController","dom","common","[object Object]","object","property","params","super","this","__truncationSuspended","_this","prevY","onFinish","__onFinishChange","call","getValue","onMouseDrag","e","diff","clientY","setValue","__impliedStep","onMouseUp","unbind","window","__input","document","createElement","setAttribute","bind","attempted","parseFloat","value","isNaN","keyCode","blur","updateDisplay","domElement","appendChild","decimals","tenTo","Math","pow","round","roundToDecimal","__precision"],"mappings":";;;;;;;AAAAA,QACI,qBACA,aACA,mBACD,SAAUC,EAAkBC,EAAKC,GAChC,aA6DA,qBAxDkCF,EAC9BG,YAAYC,EAAQC,EAAUC,GAC1BC,MAAMH,EAAQC,EAAUC,GACxBE,KAAKC,uBAAwB,EAC7B,MAAMC,EAAQF,KACd,IAAIG,EAOJ,SAASC,IACDF,EAAMG,kBACNH,EAAMG,iBAAiBC,KAAKJ,EAAOA,EAAMK,YAMjD,SAASC,EAAYC,GACjB,MAAMC,EAAOP,EAAQM,EAAEE,QACvBT,EAAMU,SAASV,EAAMK,WAAaG,EAAOR,EAAMW,eAC/CV,EAAQM,EAAEE,QAEd,SAASG,IACLrB,EAAIsB,OAAOC,OAAQ,YAAaR,GAChCf,EAAIsB,OAAOC,OAAQ,UAAWF,GAC9BV,IAOJJ,KAAKiB,QAAUC,SAASC,cAAc,SACtCnB,KAAKiB,QAAQG,aAAa,OAAQ,QAClC3B,EAAI4B,KAAKrB,KAAKiB,QAAS,SA/BvB,WACI,MAAMK,EAAYC,WAAWrB,EAAMe,QAAQO,OACtC9B,EAAO+B,MAAMH,IACdpB,EAAMU,SAASU,KA6BvB7B,EAAI4B,KAAKrB,KAAKiB,QAAS,OArBvB,WACIb,MAqBJX,EAAI4B,KAAKrB,KAAKiB,QAAS,YATvB,SAAqBR,GACjBhB,EAAI4B,KAAKL,OAAQ,YAAaR,GAC9Bf,EAAI4B,KAAKL,OAAQ,UAAWF,GAC5BX,EAAQM,EAAEE,UAOdlB,EAAI4B,KAAKrB,KAAKiB,QAAS,UAAW,SAAUR,GACtB,KAAdA,EAAEiB,UACFxB,EAAMD,uBAAwB,EAC9BD,KAAK2B,OACLzB,EAAMD,uBAAwB,EAC9BG,OAGRJ,KAAK4B,gBACL5B,KAAK6B,WAAWC,YAAY9B,KAAKiB,SAErCtB,gBAEI,OADAK,KAAKiB,QAAQO,MAAQxB,KAAKC,sBAAwBD,KAAKO,WAxD/D,SAAwBiB,EAAOO,GAC3B,MAAMC,EAAQC,KAAKC,IAAI,GAAIH,GAC3B,OAAOE,KAAKE,MAAMX,EAAQQ,GAASA,EAsDqCI,CAAepC,KAAKO,WAAYP,KAAKqC,aAClGtC,MAAM6B","file":"../../controllers/NumberControllerBox.js","sourcesContent":["define([\n    './NumberController',\n    '../dom/dom',\n    '../utils/common'\n], function (NumberController, dom, common) {\n    'use strict';\n    function roundToDecimal(value, decimals) {\n        const tenTo = Math.pow(10, decimals);\n        return Math.round(value * tenTo) / tenTo;\n    }\n    class NumberControllerBox extends NumberController {\n        constructor(object, property, params) {\n            super(object, property, params);\n            this.__truncationSuspended = false;\n            const _this = this;\n            let prevY;\n            function onChange() {\n                const attempted = parseFloat(_this.__input.value);\n                if (!common.isNaN(attempted)) {\n                    _this.setValue(attempted);\n                }\n            }\n            function onFinish() {\n                if (_this.__onFinishChange) {\n                    _this.__onFinishChange.call(_this, _this.getValue());\n                }\n            }\n            function onBlur() {\n                onFinish();\n            }\n            function onMouseDrag(e) {\n                const diff = prevY - e.clientY;\n                _this.setValue(_this.getValue() + diff * _this.__impliedStep);\n                prevY = e.clientY;\n            }\n            function onMouseUp() {\n                dom.unbind(window, 'mousemove', onMouseDrag);\n                dom.unbind(window, 'mouseup', onMouseUp);\n                onFinish();\n            }\n            function onMouseDown(e) {\n                dom.bind(window, 'mousemove', onMouseDrag);\n                dom.bind(window, 'mouseup', onMouseUp);\n                prevY = e.clientY;\n            }\n            this.__input = document.createElement('input');\n            this.__input.setAttribute('type', 'text');\n            dom.bind(this.__input, 'change', onChange);\n            dom.bind(this.__input, 'blur', onBlur);\n            dom.bind(this.__input, 'mousedown', onMouseDown);\n            dom.bind(this.__input, 'keydown', function (e) {\n                if (e.keyCode === 13) {\n                    _this.__truncationSuspended = true;\n                    this.blur();\n                    _this.__truncationSuspended = false;\n                    onFinish();\n                }\n            });\n            this.updateDisplay();\n            this.domElement.appendChild(this.__input);\n        }\n        updateDisplay() {\n            this.__input.value = this.__truncationSuspended ? this.getValue() : roundToDecimal(this.getValue(), this.__precision);\n            return super.updateDisplay();\n        }\n    }\n    return NumberControllerBox;\n});"]}