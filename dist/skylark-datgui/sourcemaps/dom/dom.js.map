{"version":3,"sources":["dom/dom.js"],"names":["define","noder","styler","geom","eventer","common","EVENT_MAP_INV","each","HTMLEvents","MouseEvents","KeyboardEvents","v","k","e","makeSelectable","selectable","makeFullscreen","fullCover","fakeEvent","elem","eventType","pars","aux","params","className","Error","evt","document","createEvent","clientX","x","clientY","y","initMouseEvent","bubbles","cancelable","window","clickCount","init","initKeyboardEvent","initKeyEvent","defaults","ctrlKey","altKey","shiftKey","metaKey","keyCode","undefined","charCode","initEvent","dispatchEvent","bind","on","unbind","off","addClass","removeClass","hasClass","getWidth","width","getHeight","height","getOffset","pagePosition","isActive"],"mappings":";;;;;;;AAAAA,QACI,qBACA,sBACA,oBACA,uBACA,mBACD,SAAUC,EAAMC,EAAOC,EAAKC,EAAQC,GACnC,aACA,MAWMC,KACND,EAAOE,MAXHC,YAAa,UACbC,aACI,QACA,YACA,YACA,UACA,aAEJC,gBAAiB,YAGE,SAAUC,EAAGC,GAChCP,EAAOE,KAAKI,EAAG,SAAUE,GACrBP,EAAcO,GAAKD,MAyE3B,OA1DIE,eAAgBb,EAAMc,WAEtBC,eAAgBb,EAAKc,UAErBC,UAAW,SAAUC,EAAMC,EAAWC,EAAMC,GACxC,MAAMC,EAASF,MACTG,EAAYlB,EAAcc,GAChC,IAAKI,EACD,MAAM,IAAIC,MAAM,cAAgBL,EAAY,mBAEhD,MAAMM,EAAMC,SAASC,YAAYJ,GACjC,OAAQA,GACR,IAAK,cAAe,CACZ,MAAMK,EAAUN,EAAOO,GAAKP,EAAOM,SAAW,EACxCE,EAAUR,EAAOS,GAAKT,EAAOQ,SAAW,EAC9CL,EAAIO,eAAeb,EAAWG,EAAOW,UAAW,EAAOX,EAAOY,aAAc,EAAMC,OAAQb,EAAOc,YAAc,EAAG,EAAG,EAAGR,EAASE,GAAS,GAAO,GAAO,GAAO,EAAO,EAAG,MACzK,MAER,IAAK,iBAAkB,CACf,MAAMO,EAAOZ,EAAIa,mBAAqBb,EAAIc,aAC1CnC,EAAOoC,SAASlB,GACZY,YAAY,EACZO,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,SAAS,EACTC,aAASC,EACTC,cAAUD,IAEdT,EAAKlB,EAAWG,EAAOW,UAAW,EAAOX,EAAOY,WAAYC,OAAQb,EAAOmB,QAASnB,EAAOoB,OAAQpB,EAAOqB,SAAUrB,EAAOsB,QAAStB,EAAOuB,QAASvB,EAAOyB,UAC3J,MAER,QACQtB,EAAIuB,UAAU7B,EAAWG,EAAOW,UAAW,EAAOX,EAAOY,aAAc,GAI/E9B,EAAOoC,SAASf,EAAKJ,GACrBH,EAAK+B,cAAcxB,IAGvByB,KAAM/C,EAAQgD,GACdC,OAAQjD,EAAQkD,IAEhBC,SAAUrD,EAAOqD,SAEjBC,YAAatD,EAAOsD,YAEpBC,SAAUvD,EAAOuD,SAEjBC,SAAUvD,EAAKwD,MAEfC,UAAWzD,EAAK0D,OAEhBC,UAAW3D,EAAK4D,aAEhBC,SAAU/D,EAAM+D","file":"../../dom/dom.js","sourcesContent":["define([\n    \"skylark-domx-noder\",\n    \"skylark-domx-styler\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-eventer\",\n    '../utils/common'\n], function (noder,styler,geom,eventer,common) {\n    'use strict';\n    const EVENT_MAP = {\n        HTMLEvents: ['change'],\n        MouseEvents: [\n            'click',\n            'mousemove',\n            'mousedown',\n            'mouseup',\n            'mouseover'\n        ],\n        KeyboardEvents: ['keydown']\n    };\n    const EVENT_MAP_INV = {};\n    common.each(EVENT_MAP, function (v, k) {\n        common.each(v, function (e) {\n            EVENT_MAP_INV[e] = k;\n        });\n    });\n    const CSS_VALUE_PIXELS = /(\\d+(\\.\\d+)?)px/;\n    function cssValueToPixels(val) {\n        if (val === '0' || common.isUndefined(val)) {\n            return 0;\n        }\n        const match = val.match(CSS_VALUE_PIXELS);\n        if (!common.isNull(match)) {\n            return parseFloat(match[1]);\n        }\n        return 0;\n    }\n    const dom = {\n        makeSelectable: noder.selectable,\n\n        makeFullscreen: geom.fullCover,\n\n        fakeEvent: function (elem, eventType, pars, aux) {\n            const params = pars || {};\n            const className = EVENT_MAP_INV[eventType];\n            if (!className) {\n                throw new Error('Event type ' + eventType + ' not supported.');\n            }\n            const evt = document.createEvent(className);\n            switch (className) {\n            case 'MouseEvents': {\n                    const clientX = params.x || params.clientX || 0;\n                    const clientY = params.y || params.clientY || 0;\n                    evt.initMouseEvent(eventType, params.bubbles || false, params.cancelable || true, window, params.clickCount || 1, 0, 0, clientX, clientY, false, false, false, false, 0, null);\n                    break;\n                }\n            case 'KeyboardEvents': {\n                    const init = evt.initKeyboardEvent || evt.initKeyEvent;\n                    common.defaults(params, {\n                        cancelable: true,\n                        ctrlKey: false,\n                        altKey: false,\n                        shiftKey: false,\n                        metaKey: false,\n                        keyCode: undefined,\n                        charCode: undefined\n                    });\n                    init(eventType, params.bubbles || false, params.cancelable, window, params.ctrlKey, params.altKey, params.shiftKey, params.metaKey, params.keyCode, params.charCode);\n                    break;\n                }\n            default: {\n                    evt.initEvent(eventType, params.bubbles || false, params.cancelable || true);\n                    break;\n                }\n            }\n            common.defaults(evt, aux);\n            elem.dispatchEvent(evt);\n        },\n\n        bind: eventer.on,\n        unbind: eventer.off,\n\n        addClass: styler.addClass,\n\n        removeClass: styler.removeClass,\n\n        hasClass: styler.hasClass,\n\n        getWidth: geom.width,\n\n        getHeight: geom.height,\n\n        getOffset: geom.pagePosition,\n\n        isActive: noder.isActive\n    };\n    return dom;\n});"]}