{"version":3,"sources":["color/math.js"],"names":["define","tmpComponent","hsv_to_rgb","h","s","v","hi","Math","floor","f","p","q","t","c","r","g","b","rgb_to_hsv","min","max","delta","NaN","rgb_to_hex","hex","this","hex_with_component","component_from_hex","componentIndex","value"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,IAAIC,EA2FJ,OAzFIC,WAAY,SAAUC,EAAGC,EAAGC,GACxB,MAAMC,EAAKC,KAAKC,MAAML,EAAI,IAAM,EAC1BM,EAAIN,EAAI,GAAKI,KAAKC,MAAML,EAAI,IAC5BO,EAAIL,GAAK,EAAID,GACbO,EAAIN,GAAK,EAAII,EAAIL,GACjBQ,EAAIP,GAAK,GAAK,EAAII,GAAKL,GACvBS,IAEER,EACAO,EACAF,IAGAC,EACAN,EACAK,IAGAA,EACAL,EACAO,IAGAF,EACAC,EACAN,IAGAO,EACAF,EACAL,IAGAA,EACAK,EACAC,IAENL,GACF,OACIQ,EAAU,IAAPD,EAAE,GACLE,EAAU,IAAPF,EAAE,GACLG,EAAU,IAAPH,EAAE,KAGbI,WAAY,SAAUH,EAAGC,EAAGC,GACxB,MAAME,EAAMX,KAAKW,IAAIJ,EAAGC,EAAGC,GACrBG,EAAMZ,KAAKY,IAAIL,EAAGC,EAAGC,GACrBI,EAAQD,EAAMD,EACpB,IAAIf,EACAC,EACJ,OAAY,IAARe,GAIIhB,EAAGkB,IACHjB,EAAG,EACHC,EAAG,IAIPF,EADAW,IAAMK,GACDJ,EAAIC,GAAKI,EACPL,IAAMI,EACT,GAAKH,EAAIF,GAAKM,EAEd,GAAKN,EAAIC,GAAKK,GAEtBjB,GAAK,GACG,IACJA,GAAK,IAGLA,EAAO,IAAJA,EACHC,EArBAA,EAAIgB,EAAQD,EAsBZd,EAAGc,EAAM,OAGjBG,WAAY,SAAUR,EAAGC,EAAGC,GACxB,IAAIO,EAAMC,KAAKC,mBAAmB,EAAG,EAAGX,GAGxC,OAFAS,EAAMC,KAAKC,mBAAmBF,EAAK,EAAGR,GACtCQ,EAAMC,KAAKC,mBAAmBF,EAAK,EAAGP,IAG1CU,mBAAoB,SAAUH,EAAKI,GAC/B,OAAOJ,GAAwB,EAAjBI,EAAqB,KAEvCF,mBAAoB,SAAUF,EAAKI,EAAgBC,GAC/C,OAAOA,IAAU3B,EAAgC,EAAjB0B,GAAsBJ,IAAQ,KAAOtB","file":"../../color/math.js","sourcesContent":["define(function () {\n    'use strict';\n    let tmpComponent;\n    const ColorMath = {\n        hsv_to_rgb: function (h, s, v) {\n            const hi = Math.floor(h / 60) % 6;\n            const f = h / 60 - Math.floor(h / 60);\n            const p = v * (1 - s);\n            const q = v * (1 - f * s);\n            const t = v * (1 - (1 - f) * s);\n            const c = [\n                [\n                    v,\n                    t,\n                    p\n                ],\n                [\n                    q,\n                    v,\n                    p\n                ],\n                [\n                    p,\n                    v,\n                    t\n                ],\n                [\n                    p,\n                    q,\n                    v\n                ],\n                [\n                    t,\n                    p,\n                    v\n                ],\n                [\n                    v,\n                    p,\n                    q\n                ]\n            ][hi];\n            return {\n                r: c[0] * 255,\n                g: c[1] * 255,\n                b: c[2] * 255\n            };\n        },\n        rgb_to_hsv: function (r, g, b) {\n            const min = Math.min(r, g, b);\n            const max = Math.max(r, g, b);\n            const delta = max - min;\n            let h;\n            let s;\n            if (max !== 0) {\n                s = delta / max;\n            } else {\n                return {\n                    h: NaN,\n                    s: 0,\n                    v: 0\n                };\n            }\n            if (r === max) {\n                h = (g - b) / delta;\n            } else if (g === max) {\n                h = 2 + (b - r) / delta;\n            } else {\n                h = 4 + (r - g) / delta;\n            }\n            h /= 6;\n            if (h < 0) {\n                h += 1;\n            }\n            return {\n                h: h * 360,\n                s: s,\n                v: max / 255\n            };\n        },\n        rgb_to_hex: function (r, g, b) {\n            let hex = this.hex_with_component(0, 2, r);\n            hex = this.hex_with_component(hex, 1, g);\n            hex = this.hex_with_component(hex, 0, b);\n            return hex;\n        },\n        component_from_hex: function (hex, componentIndex) {\n            return hex >> componentIndex * 8 & 255;\n        },\n        hex_with_component: function (hex, componentIndex, value) {\n            return value << (tmpComponent = componentIndex * 8) | hex & ~(255 << tmpComponent);\n        }\n    };\n    return ColorMath;\n});"]}