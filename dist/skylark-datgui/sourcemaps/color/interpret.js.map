{"version":3,"sources":["color/interpret.js"],"names":["define","toString","common","INTERPRETATIONS","litmus","isString","conversions","THREE_CHAR_HEX","read","original","test","match","space","hex","parseInt","write","SIX_CHAR_HEX","CSS_RGB","r","parseFloat","g","b","CSS_RGBA","a","isNumber","HEX","conversionName","color","isArray","RGB_ARRAY","length","RGBA_ARRAY","isObject","RGBA_OBJ","RGB_OBJ","HSVA_OBJ","h","s","v","HSV_OBJ","result","toReturn","arguments","toArray","each","family","conversion","BREAK"],"mappings":"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","file":"../../color/interpret.js","sourcesContent":["define([\n    './toString',\n    '../utils/common'\n], function (toString, common) {\n    'use strict';\n    const INTERPRETATIONS = [\n        {\n            litmus: common.isString,\n            conversions: {\n                THREE_CHAR_HEX: {\n                    read: function (original) {\n                        const test = original.match(/^#([A-F0-9])([A-F0-9])([A-F0-9])$/i);\n                        if (test === null) {\n                            return false;\n                        }\n                        return {\n                            space: 'HEX',\n                            hex: parseInt('0x' + test[1].toString() + test[1].toString() + test[2].toString() + test[2].toString() + test[3].toString() + test[3].toString(), 0)\n                        };\n                    },\n                    write: toString\n                },\n                SIX_CHAR_HEX: {\n                    read: function (original) {\n                        const test = original.match(/^#([A-F0-9]{6})$/i);\n                        if (test === null) {\n                            return false;\n                        }\n                        return {\n                            space: 'HEX',\n                            hex: parseInt('0x' + test[1].toString(), 0)\n                        };\n                    },\n                    write: toString\n                },\n                CSS_RGB: {\n                    read: function (original) {\n                        const test = original.match(/^rgb\\(\\s*(.+)\\s*,\\s*(.+)\\s*,\\s*(.+)\\s*\\)/);\n                        if (test === null) {\n                            return false;\n                        }\n                        return {\n                            space: 'RGB',\n                            r: parseFloat(test[1]),\n                            g: parseFloat(test[2]),\n                            b: parseFloat(test[3])\n                        };\n                    },\n                    write: toString\n                },\n                CSS_RGBA: {\n                    read: function (original) {\n                        const test = original.match(/^rgba\\(\\s*(.+)\\s*,\\s*(.+)\\s*,\\s*(.+)\\s*,\\s*(.+)\\s*\\)/);\n                        if (test === null) {\n                            return false;\n                        }\n                        return {\n                            space: 'RGB',\n                            r: parseFloat(test[1]),\n                            g: parseFloat(test[2]),\n                            b: parseFloat(test[3]),\n                            a: parseFloat(test[4])\n                        };\n                    },\n                    write: toString\n                }\n            }\n        },\n        {\n            litmus: common.isNumber,\n            conversions: {\n                HEX: {\n                    read: function (original) {\n                        return {\n                            space: 'HEX',\n                            hex: original,\n                            conversionName: 'HEX'\n                        };\n                    },\n                    write: function (color) {\n                        return color.hex;\n                    }\n                }\n            }\n        },\n        {\n            litmus: common.isArray,\n            conversions: {\n                RGB_ARRAY: {\n                    read: function (original) {\n                        if (original.length !== 3) {\n                            return false;\n                        }\n                        return {\n                            space: 'RGB',\n                            r: original[0],\n                            g: original[1],\n                            b: original[2]\n                        };\n                    },\n                    write: function (color) {\n                        return [\n                            color.r,\n                            color.g,\n                            color.b\n                        ];\n                    }\n                },\n                RGBA_ARRAY: {\n                    read: function (original) {\n                        if (original.length !== 4)\n                            return false;\n                        return {\n                            space: 'RGB',\n                            r: original[0],\n                            g: original[1],\n                            b: original[2],\n                            a: original[3]\n                        };\n                    },\n                    write: function (color) {\n                        return [\n                            color.r,\n                            color.g,\n                            color.b,\n                            color.a\n                        ];\n                    }\n                }\n            }\n        },\n        {\n            litmus: common.isObject,\n            conversions: {\n                RGBA_OBJ: {\n                    read: function (original) {\n                        if (common.isNumber(original.r) && common.isNumber(original.g) && common.isNumber(original.b) && common.isNumber(original.a)) {\n                            return {\n                                space: 'RGB',\n                                r: original.r,\n                                g: original.g,\n                                b: original.b,\n                                a: original.a\n                            };\n                        }\n                        return false;\n                    },\n                    write: function (color) {\n                        return {\n                            r: color.r,\n                            g: color.g,\n                            b: color.b,\n                            a: color.a\n                        };\n                    }\n                },\n                RGB_OBJ: {\n                    read: function (original) {\n                        if (common.isNumber(original.r) && common.isNumber(original.g) && common.isNumber(original.b)) {\n                            return {\n                                space: 'RGB',\n                                r: original.r,\n                                g: original.g,\n                                b: original.b\n                            };\n                        }\n                        return false;\n                    },\n                    write: function (color) {\n                        return {\n                            r: color.r,\n                            g: color.g,\n                            b: color.b\n                        };\n                    }\n                },\n                HSVA_OBJ: {\n                    read: function (original) {\n                        if (common.isNumber(original.h) && common.isNumber(original.s) && common.isNumber(original.v) && common.isNumber(original.a)) {\n                            return {\n                                space: 'HSV',\n                                h: original.h,\n                                s: original.s,\n                                v: original.v,\n                                a: original.a\n                            };\n                        }\n                        return false;\n                    },\n                    write: function (color) {\n                        return {\n                            h: color.h,\n                            s: color.s,\n                            v: color.v,\n                            a: color.a\n                        };\n                    }\n                },\n                HSV_OBJ: {\n                    read: function (original) {\n                        if (common.isNumber(original.h) && common.isNumber(original.s) && common.isNumber(original.v)) {\n                            return {\n                                space: 'HSV',\n                                h: original.h,\n                                s: original.s,\n                                v: original.v\n                            };\n                        }\n                        return false;\n                    },\n                    write: function (color) {\n                        return {\n                            h: color.h,\n                            s: color.s,\n                            v: color.v\n                        };\n                    }\n                }\n            }\n        }\n    ];\n    let result;\n    let toReturn;\n    const interpret = function () {\n        toReturn = false;\n        const original = arguments.length > 1 ? common.toArray(arguments) : arguments[0];\n        common.each(INTERPRETATIONS, function (family) {\n            if (family.litmus(original)) {\n                common.each(family.conversions, function (conversion, conversionName) {\n                    result = conversion.read(original);\n                    if (toReturn === false && result !== false) {\n                        toReturn = result;\n                        result.conversionName = conversionName;\n                        result.conversion = conversion;\n                        return common.BREAK;\n                    }\n                });\n                return common.BREAK;\n            }\n        });\n        return toReturn;\n    };\n    return interpret;\n});"]}