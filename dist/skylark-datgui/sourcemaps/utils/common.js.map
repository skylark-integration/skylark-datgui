{"version":3,"sources":["utils/common.js"],"names":["define","types","arrays","objects","funcs","ARR_EACH","Array","prototype","forEach","ARR_SLICE","slice","BREAK","extend","defaults","target","this","each","call","arguments","obj","isObject","Object","keys","key","isUndefined","bind","compose","toCall","args","i","length","apply","itr","scope","l","defer","debounce","func","threshold","callImmediately","timeout","callNow","clearTimeout","setTimeout","toArray","makeArray","isNull","isNaN","isArray","isPlainObject","isNumber","isString","isBoolean","isFunction"],"mappings":";;;;;;;AAAAA,QACI,sBACA,uBACA,wBACA,uBACF,SAAUC,EAAMC,EAAOC,EAAQC,GAC7B,aACA,MAAMC,EAAWC,MAAMC,UAAUC,QAC3BC,EAAYH,MAAMC,UAAUG,MAuFlC,OArFIC,SAEAC,OAAQT,EAAQS,OAEhBC,SAAU,SAAUC,GAShB,OARAC,KAAKC,KAAKP,EAAUQ,KAAKC,UAAW,GAAI,SAAUC,IACjCJ,KAAKK,SAASD,GAAOE,OAAOC,KAAKH,OACzCX,QAAQ,SAAUe,GACfR,KAAKS,YAAYV,EAAOS,MACxBT,EAAOS,GAAOJ,EAAII,KAExBE,KAAKV,QACRA,MACID,GAGXY,QAAS,WACL,MAAMC,EAASlB,EAAUQ,KAAKC,WAC9B,OAAO,WACH,IAAIU,EAAOnB,EAAUQ,KAAKC,WAC1B,IAAK,IAAIW,EAAIF,EAAOG,OAAS,EAAGD,GAAK,EAAGA,IACpCD,GAAQD,EAAOE,GAAGE,MAAMhB,KAAMa,IAElC,OAAOA,EAAK,KAIpBZ,KAAM,SAAUG,EAAKa,EAAKC,GACtB,GAAKd,EAGL,GAAId,GAAYc,EAAIX,SAAWW,EAAIX,UAAYH,EAC3Cc,EAAIX,QAAQwB,EAAKC,QACd,GAAId,EAAIW,SAAWX,EAAIW,OAAS,EAAG,CACtC,IAAIP,EACAW,EACJ,IAAKX,EAAM,EAAGW,EAAIf,EAAIW,OAAQP,EAAMW,EAAGX,IACnC,GAAIA,KAAOJ,GAAOa,EAAIf,KAAKgB,EAAOd,EAAII,GAAMA,KAASR,KAAKJ,MACtD,YAIR,IAAK,MAAMY,KAAOJ,EACd,GAAIa,EAAIf,KAAKgB,EAAOd,EAAII,GAAMA,KAASR,KAAKJ,MACxC,QAMhBwB,MAAO/B,EAAM+B,MAEbC,SAAU,SAAUC,EAAMC,EAAWC,GACjC,IAAIC,EACJ,OAAO,WACH,MAAMrB,EAAMJ,KACNa,EAAOV,UAMb,MAAMuB,EAAUF,IAAoBC,EACpCE,aAAaF,GACbA,EAAUG,WAPV,WACIH,EAAU,KACLD,GACDF,EAAKN,MAAMZ,EAAKS,IAIMU,GAC1BG,GACAJ,EAAKN,MAAMZ,EAAKS,KAK5BgB,QAAS1C,EAAO0C,SAAW1C,EAAO2C,UAElCrB,YAAavB,EAAMuB,YACnBsB,OAAQ7C,EAAM6C,OACdC,MAAO9C,EAAM8C,MACbC,QAAS/C,EAAM+C,QAEf5B,SAAUnB,EAAMgD,cAChBC,SAAUjD,EAAMiD,SAChBC,SAAUlD,EAAMkD,SAChBC,UAAWnD,EAAMmD,UACjBC,WAAYpD,EAAMoD","file":"../../utils/common.js","sourcesContent":["define([\n    \"skylark-langx-types\",\n    \"skylark-langx-arrays\",\n    \"skylark-langx-objects\",\n    \"skylark-langx-funcs\"\n],function (types,arrays,objects,funcs) {\n    'use strict';\n    const ARR_EACH = Array.prototype.forEach;\n    const ARR_SLICE = Array.prototype.slice;\n    const Common = {\n        BREAK: {},\n\n        extend: objects.extend,\n\n        defaults: function (target) {\n            this.each(ARR_SLICE.call(arguments, 1), function (obj) {\n                const keys = this.isObject(obj) ? Object.keys(obj) : [];\n                keys.forEach(function (key) {\n                    if (this.isUndefined(target[key])) {\n                        target[key] = obj[key];\n                    }\n                }.bind(this));\n            }, this);\n            return target;\n        },\n\n        compose: function () {\n            const toCall = ARR_SLICE.call(arguments);\n            return function () {\n                let args = ARR_SLICE.call(arguments);\n                for (let i = toCall.length - 1; i >= 0; i--) {\n                    args = [toCall[i].apply(this, args)];\n                }\n                return args[0];\n            };\n        },\n\n        each: function (obj, itr, scope) {\n            if (!obj) {\n                return;\n            }\n            if (ARR_EACH && obj.forEach && obj.forEach === ARR_EACH) {\n                obj.forEach(itr, scope);\n            } else if (obj.length === obj.length + 0) {\n                let key;\n                let l;\n                for (key = 0, l = obj.length; key < l; key++) {\n                    if (key in obj && itr.call(scope, obj[key], key) === this.BREAK) {\n                        return;\n                    }\n                }\n            } else {\n                for (const key in obj) {\n                    if (itr.call(scope, obj[key], key) === this.BREAK) {\n                        return;\n                    }\n                }\n            }\n        },\n\n        defer: funcs.defer,\n\n        debounce: function (func, threshold, callImmediately) {\n            let timeout;\n            return function () {\n                const obj = this;\n                const args = arguments;\n                function delayed() {\n                    timeout = null;\n                    if (!callImmediately)\n                        func.apply(obj, args);\n                }\n                const callNow = callImmediately || !timeout;\n                clearTimeout(timeout);\n                timeout = setTimeout(delayed, threshold);\n                if (callNow) {\n                    func.apply(obj, args);\n                }\n            };\n        },\n\n        toArray: arrays.toArray || arrays.makeArray,\n\n        isUndefined: types.isUndefined,\n        isNull: types.isNull,\n        isNaN: types.isNaN,\n        isArray: types.isArray,\n\n        isObject: types.isPlainObject,\n        isNumber: types.isNumber,\n        isString: types.isString,\n        isBoolean: types.isBoolean,\n        isFunction: types.isFunction\n    };\n\n    return Common;\n});"]}